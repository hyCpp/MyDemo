#ifndef VR_SDSSERVERDEF_H
#define VR_SDSSERVERDEF_H

#include "BL_String.h"

enum VR_SDSSERVER_STATE_TYPE
{
    VR_SDSSERVER_STATE_TYPE_IDLE = 0,
    VR_SDSSERVER_STATE_TYPE_PRESTART,
    VR_SDSSERVER_STATE_TYPE_START,
    VR_SDSSERVER_STATE_TYPE_DIALOG,
    VR_SDSSERVER_STATE_TYPE_ERROR,

    VR_SDSSERVER_STATE_TYPE_NUM
};

enum VR_SDSSERVER_ERROR
{
    VR_SDSSERVER_ERROR_NO_ERROR = 0,

    VR_SDSSERVER_ERROR_NETWORK_DISCONNECT,
    VR_SDSSERVER_ERROR_NETWORK_PROBLEM,
    // Client -> Server
    VR_SDSSERVER_ERROR_CS_VR_TIMEOUT = 100,
    VR_SDSSERVER_ERROR_CS_VR_NETWORK = 101,
    VR_SDSSERVER_ERROR_CS_VR_NOSOUND = 102,
    VR_SDSSERVER_ERROR_CS_VR_MISMATCH = 103,
    VR_SDSSERVER_ERROR_CS_RPT = 200,
    VR_SDSSERVER_ERROR_CS_WB = 201,
    VR_SDSSERVER_ERROR_CS_PIC = 300,
    VR_SDSSERVER_ERROR_CS_UNKNOWN = 500,

    // Server -> Client
    VR_SDSSERVER_ERROR_SC_UNKNOWN = 9,
    VR_SDSSERVER_ERROR_SC_INSUFFICIENT_SID = 10,
    VR_SDSSERVER_ERROR_SC_INVALID_UID = 11,
    VR_SDSSERVER_ERROR_SC_INVALID_MSG = 12,
    VR_SDSSERVER_ERROR_SC_INVALID_RSP = 13,
    VR_SDSSERVER_ERROR_SC_INVALID_SID = 14,
    VR_SDSSERVER_ERROR_SC_INVALID_INDEX = 15,
    VR_SDSSERVER_ERROR_SC_SEARCH = 16,
    VR_SDSSERVER_ERROR_SC_INVALID_FORMAT =17
};

enum VR_SDSSERVER_OPERATION_TYPE
{
    OPERATION_TYPE_UNKNOWN = 0,

    OPERATION_TYPE_DISPLAY_POI_LIST_ON,
    OPERATION_TYPE_DISPLAY_COM_LIST_ON,
    OPERATION_TYPE_DISPLAY_CONTACT_LIST_ON,
    OPERATION_TYPE_DISPLAY_NEWS_LIST_ON,
    OPERATION_TYPE_DISPLAY_HELP_LIST_ON,
    OPERATION_TYPE_DISPLAY_LIST_OFF,

    OPERATION_TYPE_DISPLAY_WEATHERINFO_LIST_ON,

    OPERATION_TYPE_VR,
    OPERATION_TYPE_PIC,
    OPERATION_TYPE_PROMPT,
    OPERATION_TYPE_HINTS,

    OPERATION_TYPE_DESTINATION_HOME,
    OPERATION_TYPE_DESTINATION_CORP,
    OPERATION_TYPE_DESTINATION_NORMAL,

    OPERATION_TYPE_COMMIT_RPT,
    OPERATION_TYPE_COMMIT_WB,

    OPERATION_TYPE_CHECK_WB,

    //map
    OPERATION_TYPE_MAP_MOVE_CURRENT_POS,
    OPERATION_TYPE_MAP_MOVE_UP,
    OPERATION_TYPE_MAP_MOVE_DOWN,
    OPERATION_TYPE_MAP_MOVE_LEFT,
    OPERATION_TYPE_MAP_MOVE_RIGHT,

    OPERATION_TYPE_MAP_ZOOM_IN,
    OPERATION_TYPE_MAP_ZOOM_OUT,
    OPERATION_TYPE_MAP_ZOOM,

    OPERATION_TYPE_MAP_DIR_NORTH_UP,
    OPERATION_TYPE_MAP_DIR_HEADING_UP,

    OPERATION_TYPE_MAP_VIEW_IR,
    OPERATION_TYPE_MAP_VIEW_SKY,
    OPERATION_TYPE_MAP_VIEW_NORMAL,
    OPERATION_TYPE_MAP_VIEW_CHANGE,

    //music
    OPERATION_TYPE_MUSIC_START,
    OPERATION_TYPE_MUSIC_PAUSE,
    OPERATION_TYPE_MUSIC_STOP,
    OPERATION_TYPE_MUSIC_NEXT,
    OPERATION_TYPE_MUSIC_PREV,

    // volume
    OPERATION_TYPE_VOLUME,

    // show position
    OPERATION_TYPE_SHOW_POS,
    // show route
    OPERATION_TYPE_SHOW_ROUTE,
    // send message
    OPERATION_TYPE_SEND_MESSAGE,
    // Logomark
    OPERATION_TYPE_LOGOMARK,
    // start app
    OPERATION_TYPE_APP_CONTROL,
    // start radio
    OPERATION_TYPE_RADIO_CONTROL,

    // call
    OPERATION_TYPE_CALL,

    OPERATION_TYPE_STOP,

    OPERATION_TYPE_ERROR,

    OPERATION_TYPE_MAX
};


enum VR_SDSSERVER_EVENT_TYPE
{
    VR_SDS_EVENT_TYPE_CUSTOM = 0,
    VR_SDS_EVENT_TYPE_USR,
    VR_SDS_EVENT_TYPE_SYSTEM,
    VR_SDS_EVENT_TYPE_DIALOG,
    VR_SDS_EVENT_TYPE_TASK, // for platform
};

enum VR_SDSSERVER_EVENT_ID
{
    VR_SDS_EVENT_ID_UNKNOWN = 0,
    // Custom
    VR_SDS_EVENT_ID_GRAMMER,
    VR_SDS_EVENT_ID_ENTER,
    VR_SDS_EVENT_ID_REGEX_END,
    // Usr
    VR_SDS_EVENT_ID_MIC,		// MIC: touching speak icon
    VR_SDS_EVENT_ID_BACK,		// BACK: touching back icon/hardkey)
    VR_SDS_EVENT_ID_SELECT,	// SELECT: touching POI list
    // System
    VR_SDS_EVENT_ID_TTS_END,
    VR_SDS_EVENT_ID_VR_END,
    VR_SDS_EVENT_ID_SEARCH_END,
    VR_SDS_EVENT_ID_REPORT_END,
    VR_SDS_EVENT_ID_WEIBO_END,
    VR_SDS_EVENT_ID_PICTURE_END,
    VR_SDS_EVENT_ID_CS_END,         // Contact Seek
    VR_SDS_EVENT_ID_PLAYMUSIC_REQ_END,
    VR_SDS_EVENT_ID_START_APP_END,
    VR_SDS_EVENT_ID_HOME_CHECK_END,
    VR_SDS_EVENT_ID_CORP_CHECK_END,
    // Server
    VR_SDS_EVENT_ID_DIALOG,

    // task
    VR_SDS_EVENT_ID_CONTACTSYNC, // contact sync
    VR_SDS_EVENT_ID_CONTACTMD5, // server's contact MD5
};

enum VR_SDSSERVER_STATE
{
    VR_SDS_STATE_IDLE = 0,	// gray
    VR_SDS_STATE_SPEACH,    // twinkling(red)
    VR_SDS_STATE_BUSY,	    // swirling(red)
    VR_SDS_STATE_TTS,	    // swirling(red) and TTS playing
    VR_SDS_STATE_MAX
};

typedef struct tagConversationInfo
{
    BL_String szRoleType;
    BL_String szContent;
    BL_String szAudioFileName;
}VRCP_ConversationInfo;

#define     VR_INVALID_REQUET_ID    0xFFFFFFFF

#endif // VR_SDSSERVERDEF_H
